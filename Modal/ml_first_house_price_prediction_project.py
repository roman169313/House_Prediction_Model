# -*- coding: utf-8 -*-
"""ML_FIRST_HOUSE_PRICE_PREDICTION_PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tVlwXTJdBhGE411yd8XD3tFcFytlyxqK
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import matplotlib
matplotlib.rcParams["figure.figsize"] = (20,20)
import warnings
warnings.filterwarnings('ignore')

ds=pd.read_csv('Bengaluru_House_Data.csv')
ds.head()

ds.shape

ds.groupby('area_type')['area_type'].agg('count')

df=ds.drop(['area_type','society','balcony','availability'],axis='columns')
df.head()

df.isnull().sum()

df1=df.dropna()
df1.isnull().sum()

df1.shape

df1['size'].unique()

df1['bhk']=df1['size'].apply(lambda x: int(x.split(' ')[0]))
df1.head()

df1['bhk'].unique()

df1[df1.bhk > 20]

df1.total_sqft.unique()

def is_float(x):
  try:
    float(x)
  except:
    return False
  return True

df1[~df1['total_sqft'].apply(is_float)].head(10)

def convert_sqft_to_num(x):
  tokens = x.split('-')
  if len(tokens) == 2:
    return (float(tokens[0])+float(tokens[1]))/2
  try:
    return float(x)
  except:
    return None

df2=df1.copy()
df2['total_sqft']=df2['total_sqft'].apply(convert_sqft_to_num)
df2.head()

df3=df2.copy()
df3['price_per_sqft']=df3['price']*100000/df3['total_sqft']
df3.head()

len(df3.location.unique())

df3.location=df3.location.apply(lambda x: x.strip())
location_stats=df3.groupby('location')['location'].agg('count').sort_values(ascending=False)

len(location_stats[location_stats<=10])

location_stats_less_than_10=location_stats[location_stats<=10]
location_stats_less_than_10

len(df3.location.unique())

df3.location=df3.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)
len(df3.location.unique())

df3[df3.total_sqft/df3.bhk<300].head()

df4=df3[~(df3.total_sqft/df3.bhk<300)]
df4.shape

df4.price_per_sqft.describe()

def remove_pps_outliers(df):
  df_out=pd.DataFrame()
  for key,subdf in df.groupby('location'):
    m=np.mean(subdf.price_per_sqft)
    st=np.std(subdf.price_per_sqft)
    reduced_df=subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]
    df_out=pd.concat([df_out,reduced_df],ignore_index=True)
  return df_out

df5=remove_pps_outliers(df4)
df5.shape

df5.price_per_sqft.describe()

def plot_scatter_chart(df,location):
  bhk2=df[(df.location==location) & (df.bhk==2)]
  bhk3=df[(df.location==location) & (df.bhk==3)]
  matplotlib.rcParams['figure.figsize']=(15,10)
  plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK',s=50)
  plt.scatter(bhk3.total_sqft,bhk3.price,marker='+',color='green',label='3 BHK',s=50)
  plt.xlabel("Total Square Feet Area")
  plt.ylabel("Price (Lakh Indian Rupees)")
  plt.title(location)
  plt.legend()

plot_scatter_chart(df5,"Hebbal")

def remove_bhk_outliers(df):
  exclude_indices=np.array([])
  for location,location_df in df.groupby('location'):
    bhk_stats={}
    for bhk,bhk_df in location_df.groupby('bhk'):
      bhk_stats[bhk]={
          'mean':np.mean(bhk_df.price_per_sqft),
          'std':np.std(bhk_df.price_per_sqft),
          'count':bhk_df.shape[0]
      }
      for bhk,bhk_df in location_df.groupby('bhk'):
        stats=bhk_stats.get(bhk-1)
        if stats and stats['count']>5:
          exclude_indices=np.append(exclude_indices,bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)
  return df.drop(exclude_indices,axis='index')
df6=remove_bhk_outliers(df5)
df6.shape

plot_scatter_chart(df6,"Hebbal")

import matplotlib
matplotlib.rcParams["figure.figsize"]=(20,10)
plt.hist(df6.price_per_sqft,rwidth=0.8)
plt.xlabel("Price Per Square Feet")
plt.ylabel("Count")

df6.bath.unique()

df6[df6.bath>10]

plt.hist(df6.bath,rwidth=0.8)
plt.xlabel("Number of bathrooms")
plt.ylabel("Count")

df7=df6[df6.bath<df6.bhk+2]
df7.shape

df7.drop(['size','price_per_sqft'],axis='columns')

df7

pd.get_dummies(df7.location).head()

dummies=pd.get_dummies(df7.location)
dummies.head()

df8=pd.concat([df7,dummies.drop('other',axis='columns')],axis='columns')
df8.head()

df8.drop('location',axis='columns',inplace=True)
df8.head()

X=df8.drop('price',axis='columns')
X.head()

y=df8.price
y.head()

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=10)

from sklearn.linear_model import LinearRegression
lr_clf=LinearRegression()
lr_clf.fit(X_train,y_train)
lr_clf.score(X_test,y_test)

from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score

cv=ShuffleSplit(n_splits=5,test_size=0.2,random_state=0)

cross_val_score(LinearRegression(),X,y,cv=cv)

from sklearn.model_selection import GridSearchCV

from sklearn.linear_model import Lasso
from sklearn.tree import DecisionTreeRegressor
def find_best_model_using_gridsearchcv(X,y):
  algos={
      'linear_regression':{
          'model':LinearRegression(),
          'params':{
              # 'normalize': [True,False]  # Remove or comment out this line
              'fit_intercept': [True, False],  # You can explore other valid parameters like 'fit_intercept'

          }
      },
      'lasso':{
          'model':Lasso(),
          'params':{
              'alpha':[1,2],
              'selection':['random','cyclic']
        },
      },
        'decision_tree':{
              'model':DecisionTreeRegressor(),
              'params':{
                  'criterion':['mse','friedman_mse'],
                  'splitter':['best','random']
              }
          }

  }
  scores=[]
  cv=ShuffleSplit(n_splits=5,test_size=0.2,random_state=0)
  for algo_name,config in algos.items():
    gs=GridSearchCV(config['model'],config['params'],cv=cv,return_train_score=False)
    gs.fit(X,y)
    scores.append({
        'model':algo_name,
        'best_score':gs.best_score_,
        'best_params':gs.best_params_
    })

  return pd.DataFrame(scores,columns=['model','best_score','best_params'])

find_best_model_using_gridsearchcv(X,y)

def predict_price(location,sqft,bath,bhk):
  loc_index=np.where(X.columns==location)[0][0]
  x=np.zeros(len(X.columns))
  x[0]=sqft
  x[1]=bath
  x[2]=bhk
  if loc_index >=0:
    x[loc_index]=1
  return lr_clf.predict([x])[0]

predict_price('1st Phase JP Nagar',1000,2,2)

predict_price('Hebbal',1000,3,3)

predict_price('Indira Nagar',1000,2,1)

import pickle
with open('banglore_home_prices_model.pickle','wb') as f:
  pickle.dump(lr_clf,f)